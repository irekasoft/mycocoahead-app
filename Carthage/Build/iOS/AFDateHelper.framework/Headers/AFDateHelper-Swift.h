// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSTimeZone;
@class NSLocale;

@interface NSDate (SWIFT_EXTENSION(AFDateHelper))

/// Returns true if dates are equal while ignoring time.
///
/// \param date The Date to compare.
- (BOOL)isEqualToDateIgnoringTime:(NSDate * _Nonnull)date;

/// Returns Returns true if date is today.
- (BOOL)isToday;

/// Returns true if date is tomorrow.
- (BOOL)isTomorrow;

/// Returns true if date is yesterday.
- (BOOL)isYesterday;

/// Returns true if date are in the same week.
///
/// \param date The date to compare.
- (BOOL)isSameWeekAsDate:(NSDate * _Nonnull)date;

/// Returns true if date is this week.
- (BOOL)isThisWeek;

/// Returns true if date is next week.
- (BOOL)isNextWeek;

/// Returns true if date is last week.
- (BOOL)isLastWeek;

/// Returns true if dates are in the same year.
///
/// \param date The date to compare.
- (BOOL)isSameYearAsDate:(NSDate * _Nonnull)date;

/// Returns true if date is this year.
- (BOOL)isThisYear;

/// Returns true if date is next year.
- (BOOL)isNextYear;

/// Returns true if date is last year.
- (BOOL)isLastYear;

/// Returns true if date is earlier than date.
///
/// \param date The date to compare.
- (BOOL)isEarlierThanDate:(NSDate * _Nonnull)date;

/// Returns true if date is later than date.
///
/// \param date The date to compare.
- (BOOL)isLaterThanDate:(NSDate * _Nonnull)date;

/// Returns true if date is in future.
- (BOOL)isInFuture;

/// Returns true if date is in past.
- (BOOL)isInPast;

/// Creates a new date by a adding days.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of days to add.
- (NSDate * _Nonnull)dateByAddingDays:(NSInteger)days;

/// Creates a new date by a substracting days.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of days to substract.
- (NSDate * _Nonnull)dateBySubtractingDays:(NSInteger)days;

/// Creates a new date by a adding hours.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of hours to add.
- (NSDate * _Nonnull)dateByAddingHours:(NSInteger)hours;

/// Creates a new date by substracting hours.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of hours to substract.
- (NSDate * _Nonnull)dateBySubtractingHours:(NSInteger)hours;

/// Creates a new date by adding minutes.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of minutes to add.
- (NSDate * _Nonnull)dateByAddingMinutes:(NSInteger)minutes;

/// Creates a new date by substracting minutes.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of minutes to add.
- (NSDate * _Nonnull)dateBySubtractingMinutes:(NSInteger)minutes;

/// Creates a new date by adding seconds.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param seconds The number of seconds to add.
- (NSDate * _Nonnull)dateByAddingSeconds:(NSInteger)seconds;

/// Creates a new date by substracting seconds.
///
/// <ul><li>Returns A new date object.</li></ul>
/// \param days The number of seconds to substract.
- (NSDate * _Nonnull)dateBySubtractingSeconds:(NSInteger)seconds;

/// Creates a new date from the start of the day.
///
/// <ul><li>Returns A new date object.</li></ul>
- (NSDate * _Nonnull)dateAtStartOfDay;

/// Creates a new date from the end of the day.
///
/// <ul><li>Returns A new date object.</li></ul>
- (NSDate * _Nonnull)dateAtEndOfDay;

/// Creates a new date from the start of the week.
///
/// <ul><li>Returns A new date object.</li></ul>
- (NSDate * _Nonnull)dateAtStartOfWeek;

/// Creates a new date from the end of the week.
///
/// <ul><li>Returns A new date object.</li></ul>
- (NSDate * _Nonnull)dateAtEndOfWeek;

/// Creates a new date from the first day of the month
///
/// <ul><li>Returns A new date object.</li></ul>
- (NSDate * _Nonnull)dateAtTheStartOfMonth;

/// Creates a new date from the last day of the month
///
/// <ul><li>Returns A new date object.</li></ul>
- (NSDate * _Nonnull)dateAtTheEndOfMonth;

/// Creates a new date based on tomorrow.
///
/// <ul><li>Returns A new date object.</li></ul>
+ (NSDate * _Nonnull)tomorrow;

/// Creates a new date based on yesterdat.
///
/// <ul><li>Returns A new date object.</li></ul>
+ (NSDate * _Nonnull)yesterday;

/// Return a new NSDate object with the new hour, minute and seconds values
///
/// :returns: NSDate
- (NSDate * _Nonnull)setTimeOfDateWithHour:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second;

/// Gets the number of seconds after a date.
///
/// <ul><li>Returns The number of seconds</li></ul>
/// \param date the date to compare.
- (NSInteger)secondsAfterDate:(NSDate * _Nonnull)date;

/// Gets the number of seconds before a date.
///
/// <ul><li>Returns The number of seconds</li></ul>
/// \param date The date to compare.
- (NSInteger)secondsBeforeDate:(NSDate * _Nonnull)date;

/// Gets the number of minutes after a date.
///
/// <ul><li>Returns The number of minutes</li></ul>
/// \param date the date to compare.
- (NSInteger)minutesAfterDate:(NSDate * _Nonnull)date;

/// Gets the number of minutes before a date.
///
/// <ul><li>Returns The number of minutes</li></ul>
/// \param date The date to compare.
- (NSInteger)minutesBeforeDate:(NSDate * _Nonnull)date;

/// Gets the number of hours after a date.
///
/// <ul><li>Returns The number of hours</li></ul>
/// \param date The date to compare.
- (NSInteger)hoursAfterDate:(NSDate * _Nonnull)date;

/// Gets the number of hours before a date.
///
/// <ul><li>Returns The number of hours</li></ul>
/// \param date The date to compare.
- (NSInteger)hoursBeforeDate:(NSDate * _Nonnull)date;

/// Gets the number of days after a date.
///
/// <ul><li>Returns The number of days</li></ul>
/// \param date The date to compare.
- (NSInteger)daysAfterDate:(NSDate * _Nonnull)date;

/// Gets the number of days before a date.
///
/// <ul><li>Returns The number of days</li></ul>
/// \param date The date to compare.
- (NSInteger)daysBeforeDate:(NSDate * _Nonnull)date;

/// Returns the nearest hour.
- (NSInteger)nearestHour;

/// Returns the year component.
- (NSInteger)year;

/// Returns the month component.
- (NSInteger)month;

/// Returns the week of year component.
- (NSInteger)week;

/// Returns the day component.
- (NSInteger)day;

/// Returns the hour component.
- (NSInteger)hour;

/// Returns the minute component.
- (NSInteger)minute;

/// Returns the seconds component.
- (NSInteger)seconds;

/// Returns the weekday component.
- (NSInteger)weekday;

/// Returns the nth days component. e.g. 2nd Tuesday of the month is 2.
- (NSInteger)nthWeekday;

/// Returns the days of the month.
- (NSInteger)monthDays;

/// Returns the first day of the week.
- (NSInteger)firstDayOfWeek;

/// Returns the last day of the week.
- (NSInteger)lastDayOfWeek;

/// Returns true if a weekday.
- (BOOL)isWeekday;

/// Returns true if weekend.
- (BOOL)isWeekend;

/// A string representation using short date and time style.
- (NSString * _Nonnull)toString;

/// A string representation based on custom style.
///
/// <ul><li>Returns A string representation of the date.</li></ul>
/// \param dateStyle The date style to use.
///
/// \param timeStyle The time style to use.
///
/// \param doesRelativeDateFormatting Enables relative date formatting.
///
/// \param timeZone The time zone to use.
///
/// \param locale The locale to use.
- (NSString * _Nonnull)toStringWithDateStyle:(NSDateFormatterStyle)dateStyle timeStyle:(NSDateFormatterStyle)timeStyle doesRelativeDateFormatting:(BOOL)doesRelativeDateFormatting timeZone:(NSTimeZone * _Nonnull)timeZone locale:(NSLocale * _Nonnull)locale;

/// A string representation based on a relative time language. i.e. just now, 1 minute ago etc..
- (NSString * _Nonnull)relativeTimeToString;

/// A string representation of the weekday.
- (NSString * _Nonnull)weekdayToString;

/// A short string representation of the weekday.
- (NSString * _Nonnull)shortWeekdayToString;

/// A very short string representation of the weekday.
///
/// <ul><li>Returns String</li></ul>
- (NSString * _Nonnull)veryShortWeekdayToString;

/// A string representation of the month.
///
/// <ul><li>Returns String</li></ul>
- (NSString * _Nonnull)monthToString;

/// A short string representation of the month.
///
/// <ul><li>Returns String</li></ul>
- (NSString * _Nonnull)shortMonthToString;

/// A very short string representation of the month.
///
/// <ul><li>Returns String</li></ul>
- (NSString * _Nonnull)veryShortMonthToString;
@end

#pragma clang diagnostic pop
